{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","props","images","step","frameSize","itemWidth","animationDuration","isInfinite","useState","shift","setShift","carouselWidth","maxShift","length","className","style","width","transform","transition","map","image","i","src","alt","toString","type","onClick","currentTranslate","disabled","currentShift","defaultControls","App","controls","setControls","handleInputChange","control","value","currentControls","onChange","event","target","min","max","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c2f62b3a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\nimport { Controls } from '../types/Controls';\n\ninterface Props extends Controls {\n  images: string[];\n}\n\nexport const Carousel: React.FC<Props> = (props) => {\n  const {\n    images,\n    step,\n    frameSize,\n    itemWidth,\n    animationDuration,\n    isInfinite,\n  } = props;\n\n  const [shift, setShift] = useState(0);\n\n  const carouselWidth = frameSize * itemWidth;\n  const maxShift = images.length - frameSize;\n\n  const handlePrevClick = () => {\n    setShift(currentTranslate => {\n      return currentTranslate - step > 0\n        ? currentTranslate - step\n        : 0;\n    });\n  };\n\n  const handleNextClick = () => {\n    setShift(currentShift => {\n      if (currentShift === maxShift && isInfinite) {\n        return 0;\n      }\n\n      return currentShift + step < maxShift\n        ? currentShift + step\n        : maxShift;\n    });\n  };\n\n  return (\n    <div className=\"Carousel\">\n      <div className=\"Carousel__frame\" style={{ width: `${carouselWidth}px` }}>\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            transform: `translateX(-${shift * itemWidth}px)`,\n            transition: `${animationDuration}ms transform`,\n          }}\n        >\n          {images.map((image, i) => (\n            <li key={image}>\n              <img\n                className=\"Carousel__img\"\n                src={image}\n                alt={(i + 1).toString()}\n                width={itemWidth}\n              />\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"Carousel__buttons\">\n        <button\n          type=\"button\"\n          className=\"Carousel__button\"\n          onClick={handlePrevClick}\n          disabled={!shift}\n        >\n          {'<'}\n        </button>\n\n        <button\n          type=\"button\"\n          className=\"Carousel__button\"\n          onClick={handleNextClick}\n          disabled={!isInfinite && shift === maxShift}\n          data-cy=\"next\"\n        >\n          {'>'}\n        </button>\n      </div>\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\nimport type { Controls } from './types/Controls';\n\nconst defaultControls: Controls = {\n  step: 3,\n  frameSize: 3,\n  itemWidth: 130,\n  animationDuration: 1000,\n  isInfinite: false,\n};\n\nexport const App = () => {\n  const [controls, setControls] = useState<Controls>(defaultControls);\n\n  const images = [\n    './img/1.png',\n    './img/2.png',\n    './img/3.png',\n    './img/4.png',\n    './img/5.png',\n    './img/6.png',\n    './img/7.png',\n    './img/8.png',\n    './img/9.png',\n    './img/10.png',\n  ];\n\n  const handleInputChange = (control: keyof Controls, value: number) => {\n    setControls(currentControls => ({ ...currentControls, [control]: value }));\n  };\n\n  const toggleInfiniteCheckbox = () => {\n    setControls(currentControls => ({\n      ...currentControls, isInfinite: !currentControls.isInfinite,\n    }));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"App__title\" data-cy=\"title\">\n        {`Carousel with ${images.length} images`}\n      </h1>\n\n      <div className=\"App__controls\">\n        <label className=\"App__control\">\n          Item width:\n          <input\n            type=\"number\"\n            className=\"App__input\"\n            value={controls.itemWidth}\n            onChange={(event) => {\n              handleInputChange('itemWidth', +event.target.value);\n            }}\n            step={10}\n          />\n        </label>\n\n        <label className=\"App__control\">\n          Frame size:\n          <input\n            type=\"number\"\n            className=\"App__input\"\n            value={controls.frameSize}\n            min={1}\n            max={images.length}\n            onChange={(event) => {\n              handleInputChange('frameSize', +event.target.value);\n            }}\n          />\n        </label>\n\n        <label className=\"App__control\">\n          Step:\n          <input\n            type=\"number\"\n            className=\"App__input\"\n            value={controls.step}\n            min={1}\n            max={images.length}\n            onChange={(event) => {\n              handleInputChange('step', +event.target.value);\n            }}\n          />\n        </label>\n\n        <label className=\"App__control\">\n          Animation duration:\n          <input\n            type=\"number\"\n            className=\"App__input\"\n            value={controls.animationDuration}\n            min={0}\n            step={100}\n            onChange={(event) => {\n              handleInputChange('animationDuration', +event.target.value);\n            }}\n          />\n        </label>\n\n        <label className=\"App__control App__control--checkbox\">\n          Infinite:\n          <input\n            type=\"checkbox\"\n            className=\"App__checkbox\"\n            checked={controls.isInfinite}\n            onClick={toggleInfiniteCheckbox}\n          />\n        </label>\n      </div>\n\n      <Carousel\n        images={images}\n        step={controls.step}\n        frameSize={controls.frameSize}\n        itemWidth={controls.itemWidth}\n        animationDuration={controls.animationDuration}\n        isInfinite={controls.isInfinite}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}